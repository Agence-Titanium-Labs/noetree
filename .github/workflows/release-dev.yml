name: Deploy Dev from Tag

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to deploy (ex: v1.45.2)"
        required: true

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create tags
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git fetch --tags

          # Check if the input tag already exists
          if ! git rev-parse --verify refs/tags/"${{ github.event.inputs.tag }}" &>/dev/null; then
            echo "Creating tag ${{ github.event.inputs.tag }}..."
            # Create the input tag on the current commit
            git tag "${{ github.event.inputs.tag }}"
          else
            echo "Tag ${{ github.event.inputs.tag }} already exists, using existing tag"
          fi

          # Check if the unstable tag already exists
          NEW_TAG="${{ github.event.inputs.tag }}-unstable"
          if ! git rev-parse --verify refs/tags/"$NEW_TAG" &>/dev/null; then
            echo "Creating tag $NEW_TAG..."
            # Create the unstable tag based on the input tag
            git tag "$NEW_TAG" "${{ github.event.inputs.tag }}"
          else
            echo "Tag $NEW_TAG already exists, using existing tag"
          fi

          # Push both tags (will be no-op if they already exist remotely)
          git push origin "${{ github.event.inputs.tag }}" || echo "Tag ${{ github.event.inputs.tag }} already exists on remote"
          git push origin "$NEW_TAG" || echo "Tag $NEW_TAG already exists on remote"

      - name: Deploy to Vercel (Dev)
        run: |
          TAG_UNSTABLE="${{ github.event.inputs.tag }}-unstable"
          JSON_PAYLOAD=$(cat <<EOF
          {
            "meta": {
              "version": "${TAG_UNSTABLE}",
              "env": "development"
            }
          }
          EOF
          )
          HTTP_RESPONSE=$(curl -f -s -w "\n%{http_code}" -X POST "https://api.vercel.com/v1/integrations/deploy/prj_Y6x0SGC6fmsUzyy6GYi5bRDE6YBJ" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$ d')

          echo "HTTP Status: $HTTP_STATUS"
          echo "Response body: $HTTP_BODY"

          if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
            echo "Deployment failed with status $HTTP_STATUS"
            echo "$HTTP_BODY"
            exit 1
          fi

          echo "Deployment triggered successfully"
