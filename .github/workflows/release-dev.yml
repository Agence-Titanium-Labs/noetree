name: Deploy Dev from Tag

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to deploy (ex: v1.45.2)"
        required: true

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create tags
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git fetch --tags

          # Check if the input tag already exists
          if ! git rev-parse --verify refs/tags/"${{ github.event.inputs.tag }}" &>/dev/null; then
            echo "Creating tag ${{ github.event.inputs.tag }}..."
            # Create the input tag on the current commit
            git tag "${{ github.event.inputs.tag }}"
          else
            echo "Tag ${{ github.event.inputs.tag }} already exists, using existing tag"
          fi

          # Check if the unstable tag already exists
          NEW_TAG="${{ github.event.inputs.tag }}-unstable"
          if ! git rev-parse --verify refs/tags/"$NEW_TAG" &>/dev/null; then
            echo "Creating tag $NEW_TAG..."
            # Create the unstable tag based on the input tag
            git tag "$NEW_TAG" "${{ github.event.inputs.tag }}"
          else
            echo "Tag $NEW_TAG already exists, using existing tag"
          fi

          # Push both tags (will be no-op if they already exist remotely)
          git push origin "${{ github.event.inputs.tag }}" || echo "Tag ${{ github.event.inputs.tag }} already exists on remote"
          git push origin "$NEW_TAG" || echo "Tag $NEW_TAG already exists on remote"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (Dev)
        run: |
          TAG_UNSTABLE="${{ github.event.inputs.tag }}-unstable"

          # Configure Vercel CLI with token
          vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }}

          # Deploy to development environment
          echo "Deploying version ${TAG_UNSTABLE} to Vercel development environment..."

          vercel deploy \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --prod \
            --meta version=${TAG_UNSTABLE} \
            --meta environment=development

          echo "Deployment triggered successfully"